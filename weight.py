import numpy as np
import math
from sklearn.preprocessing import MinMaxScaler

# m, n, 및 Aij 값 설정
m = 15  # 대안 개수
n = 9 # 성능 지표 개수
def calculate_entropy(p_matrix):
    entropy = np.zeros_like(p_matrix)  # 결과 배열 초기화
    for i, p_value in enumerate(p_matrix):
        if p_value == 0:
            entropy[i] = 0
        else:
            entropy[i] = (p_value * np.log(p_value))
    # return np.sum(entropy)
    return entropy

Aij_values = [
   # [295.76,113488.52,336.63,0.84,2.17,16.20,629.92,2356.33,2360.19],
   #  [0.09,1.59,0.76,0.07,0.08,0.13,0.68,0.99,4.50],
   #  [0.05,2.65,0.60,0.06,1.22,0.34,0.62,0.99,4.15],
   #  [2.47,51.26,9.40,0.55,14*10**15,10.31,8.76,0.13,51.61],
   #  [2.47,51.26,9.40,0.55,30*10**13,10.31,8.76,0.13,51.61],
   #  [25.29,824.90,35.37,0.17,0.00,8.69,53.84,16.20,201.58],
   #  [0.07,1.58,0.75,0.07,0.10,0.14,0.67,0.99,4.52],
   #  [0.54,0.93,1.98,0.23,0.60,0.15,1.76,0.96,10.09],
   #  [2.47,51.26,9.40,0.55,12*10**5,10.31,8.76,0.13,51.61],
   #  [0.47,1.03,1.10,0.03,1.92,4.88,1.31,0.98,6.90],
   #  [0.19,2.38,0.91,0.13,2.66,0.08,0.88,0.99,5.50],
   #  [2.47,51.26,9.40,0.62,98.84,10.31,8.76,0.13,51.61],
   #  [0.17,3.45,0.87,0.12,0.84,0.07,0.82,0.99,5.20],
   #  [1.83,3.08,0.97,0.04,7.00,74.45,4.37,0.83,19.92],
   #  [0.15,2.57,0.81,0.09,0.00,0.12,0.72,0.99,4.60],
   #  [124.51,29504.49,256.19,0.18,0.38,14.05,283.27,611.94,1203.50]

    [69.41, 11047.23, 21.30, 0.53, 2.35, 2.28, 163.13, 0.19, 33.83],
    [10.11, 493.24, 34.43, 0.12, 3.62, 0.40, 28.93, 0.95, 7.16],
    [30.02, 10220.44, 120.07, 0.37, 10 * 10 ** 12, 3.49, 116.14, 0.10, 32.54],
    [30.02, 10220.44, 120.07, 0.37, 26 * 10 ** 15, 3.49, 116.14, 0.10, 32.54],
    [30.02, 10220.44, 120.07, 0.37, 78 * 10 ** 14, 3.49, 116.14, 0.10, 32.54],
    [222.01, 33053322.50, 298.60, 0.89, 3.70, 554.15, 5885.98, 3544.59, 1850.31],
    [3.76, 101.65, 14.32, 0.05, 2.40, 0.07, 12.34, 0.99, 3.28],
    [16.37, 2040.01, 62.17, 0.27, 1.19, 0.64, 54.50, 0.78, 14.55],
    [30.02, 10220.44, 120.07, 0.37, 97933.71, 3.49, 116.14, 0.10, 32.54],
    [18.76, 1578.68, 57.10, 0.20, 7.55, 9.23, 52.46, 0.83, 12.80],
    [0.46, 37.30, 2.43, 0.01, 1.51, 0.08, 6.53, 1.00, 2.04],
    [30.02, 10220.44, 120.07, 0.37, 22 * 10 ** 16, 3.49, 116.14, 0.10, 32.54],
    [3.49, 4558.43, 88.15, 0.32, 0.10, 4.45, 69.27, 0.51, 21.74],
    [2.58, 128.20, 16.33, 0.07, 2.87, 0.05, 12.64, 0.99, 3.71],
    [30.02, 10220.44, 120.07, 0.37, 68 * 10 ** 15, 3.49, 116.14, 0.10, 32.54]
]

np.set_printoptions(formatter={'all': lambda x: f'{x:.9f}'})


# Aij 값을 NumPy 배열로 변환
Aij = np.array(Aij_values, dtype=np.float64)

# 배열 출력
print(Aij)

# 각 Aij 요소를 정규화
normalized_Aij = Aij / np.sum(Aij, axis=0)
print(normalized_Aij)

print("-------------------------")

k = 1 / math.log(n)
M_ij = np.zeros((m, n))
for i in range(m):
    p_matrix = normalized_Aij[i, :]
    entropy = calculate_entropy(p_matrix)
    for j in range(n):
        M_ij[i][j] = entropy[j]


E_ij = np.sum(M_ij, axis=0) * -k



# print(entropies)
print(E_ij)
print("-------------------------")
w = np.zeros(n)
for j in range(n):
    w[j] = (E_ij[j]) / sum(E_ij)

# for i in range(m):
#     for j in range(n):
#         w[i] = E_ij / sum(E_ij)
print(w)

# total_entropy = np.sum(entropies)
